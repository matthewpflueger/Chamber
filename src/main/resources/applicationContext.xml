<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
	    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	    xmlns:p="http://www.springframework.org/schema/p"
        xmlns:akka="http://akka.io/schema/akka"
	    xmlns:context="http://www.springframework.org/schema/context"
	    xmlns:util="http://www.springframework.org/schema/util"
	    xsi:schemaLocation="
	        http://www.springframework.org/schema/beans
	        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	        http://www.springframework.org/schema/context
	        http://www.springframework.org/schema/context/spring-context-3.0.xsd
	        http://www.springframework.org/schema/util
	        http://www.springframework.org/schema/util/spring-util-3.0.xsd
            http://akka.io/schema/akka
            http://akka.io/akka-1.3-RC4.xsd"
	    default-init-method="init"
	    default-destroy-method="destroy">


    <!-- This is here for validation purposes - any unresolved placeholders will prevent the application from starting...
         The order is set to explicitly communicate that this property placeholder configurer will be run last (the default) and all
         other property placeholder configurers should set their order to less than this.  Also, all other configurers should
         set ignore unresolvable to true in order to allow the context to fully startup...

         See http://tarlogonjava.blogspot.com/2009/02/tips-regarding-springs.html for an explanation of what is going on here. -->
    <context:property-placeholder order="2147483647"/>


    <import resource="classpath:applicationContext-properties.xml" />
    <import resource="classpath:database.xml" />


    <bean id="facebookAccess" class="com.echoed.chamber.services.facebook.FacebookAccessActorClient">
        <property name="actorRef" ref="facebookAccessActor" />
    </bean>

    <bean id="facebookServiceCreator" class="com.echoed.chamber.services.facebook.FacebookServiceCreatorActorClient">
        <property name="facebookServiceCreatorActor" ref="facebookServiceCreatorActor" />
    </bean>

    <bean id="facebookServiceLocator" class="com.echoed.chamber.services.facebook.FacebookServiceLocatorActorClient">
        <property name="facebookServiceLocatorActor" ref="facebookServiceLocatorActor" />
    </bean>

    <bean id="echoService" class="com.echoed.chamber.services.echo.EchoServiceActorClient">
        <property name="echoServiceActor" ref="echoServiceActor" />
    </bean>

    <bean id="twitterAccess" class="com.echoed.chamber.services.twitter.TwitterAccessActorClient">
        <property name="twitterAccessActor" ref="twitterAccessActor" />
    </bean>

    <bean id="twitterServiceCreator" class="com.echoed.chamber.services.twitter.TwitterServiceCreatorActorClient">
        <property name="twitterServiceCreatorActor" ref="twitterServiceCreatorActor" />
    </bean>

    <bean id="twitterServiceLocator" class="com.echoed.chamber.services.twitter.TwitterServiceLocatorActorClient">
        <property name="twitterServiceLocatorActor" ref="twitterServiceLocatorActor" />
    </bean>

    <bean id="echoedUserServiceCreator" class="com.echoed.chamber.services.echoeduser.EchoedUserServiceCreatorActorClient">
        <property name="echoedUserServiceCreatorActor" ref="echoedUserServiceCreatorActor" />
    </bean>

    <bean id="echoedUserServiceLocator" class="com.echoed.chamber.services.echoeduser.EchoedUserServiceLocatorActorClient">
        <property name="echoedUserServiceLocatorActor" ref="echoedUserServiceLocatorActor" />
    </bean>

    <bean id="partnerUserServiceCreator" class="com.echoed.chamber.services.partneruser.PartnerUserServiceCreatorActorClient">
        <property name="partnerUserServiceCreatorActor" ref="partnerUserServiceCreatorActor" />
    </bean>

    <bean id="partnerUserServiceLocator" class="com.echoed.chamber.services.partneruser.PartnerUserServiceLocatorActorClient">
        <property name="partnerUserServiceLocatorActor" ref="partnerUserServiceLocatorActor" />
    </bean>


    <akka:untyped-actor
            id="facebookAccessActor"
            implementation="com.echoed.chamber.services.facebook.FacebookAccessActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="properties" ref="facebookAccessActorProperties" />
    </akka:untyped-actor>

    <akka:untyped-actor
            id="facebookServiceCreatorActor"
            implementation="com.echoed.chamber.services.facebook.FacebookServiceCreatorActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="facebookAccess" ref="facebookAccess" />
        <!--suppress SpringModelInspection -->
        <property name="facebookUserDao" ref="facebookUserDao" />
        <!--suppress SpringModelInspection -->
        <property name="facebookPostDao" ref="facebookPostDao" />
        <!--suppress SpringModelInspection -->
        <property name="facebookFriendDao" ref="facebookFriendDao" />
    </akka:untyped-actor>

    <akka:untyped-actor
            id="facebookServiceLocatorActor"
            implementation="com.echoed.chamber.services.facebook.FacebookServiceLocatorActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="facebookServiceCreator" ref="facebookServiceCreator" />
    </akka:untyped-actor>

    <akka:untyped-actor
            id="echoServiceActor"
            implementation="com.echoed.chamber.services.echo.EchoServiceActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="echoedUserServiceLocator" ref="echoedUserServiceLocator" />
        <!--suppress SpringModelInspection -->
        <property name="echoDao" ref="echoDao" />
        <!--suppress SpringModelInspection -->
        <property name="echoPossibilityDao" ref="echoPossibilityDao" />
        <!--suppress SpringModelInspection -->
        <property name="retailerDao" ref="retailerDao" />
        <!--suppress SpringModelInspection -->
        <property name="retailerSettingsDao" ref="retailerSettingsDao" />
        <!--suppress SpringModelInspection -->
        <property name="echoClickDao" ref="echoClickDao" />
    </akka:untyped-actor>

    <akka:untyped-actor
           id="twitterAccessActor"
           implementation="com.echoed.chamber.services.twitter.TwitterAccessActor"
           autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="properties" ref="twitterAccessActorProperties"/>
    </akka:untyped-actor>

    <akka:untyped-actor
           id="twitterServiceCreatorActor"
           implementation="com.echoed.chamber.services.twitter.TwitterServiceCreatorActor"
           autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="twitterAccess" ref="twitterAccess"/>
        <!--suppress SpringModelInspection -->
        <property name="twitterUserDao" ref="twitterUserDao"/>
        <!--suppress SpringModelInspection -->
        <property name="twitterStatusDao" ref="twitterStatusDao"/>
    </akka:untyped-actor>

    <akka:untyped-actor
           id="twitterServiceLocatorActor"
           implementation="com.echoed.chamber.services.twitter.TwitterServiceLocatorActor"
           autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="twitterServiceCreator" ref="twitterServiceCreator"/>
    </akka:untyped-actor>

    <akka:untyped-actor
            id="echoedUserServiceCreatorActor"
            implementation="com.echoed.chamber.services.echoeduser.EchoedUserServiceCreatorActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="twitterServiceLocator" ref="twitterServiceLocator"/>
        <!--suppress SpringModelInspection -->
        <property name="facebookServiceLocator" ref="facebookServiceLocator"/>
        <!--suppress SpringModelInspection -->
        <property name="echoedUserDao" ref="echoedUserDao" />
        <!--suppress SpringModelInspection -->
        <property name="closetDao" ref="closetDao" />
        <!--suppress SpringModelInspection -->
        <property name="echoedFriendDao" ref="echoedFriendDao" />
        <!--suppress SpringModelInspection -->
        <property name="feedDao" ref="feedDao"/>
    </akka:untyped-actor>


    <akka:untyped-actor
            id="echoedUserServiceLocatorActor"
            implementation="com.echoed.chamber.services.echoeduser.EchoedUserServiceLocatorActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="echoedUserServiceCreator" ref="echoedUserServiceCreator" />
    </akka:untyped-actor>


    <akka:untyped-actor
            id="partnerUserServiceCreatorActor"
            implementation="com.echoed.chamber.services.partneruser.PartnerUserServiceCreatorActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="partnerUserDao" ref="partnerUserDao" />
    </akka:untyped-actor>


    <akka:untyped-actor
            id="partnerUserServiceLocatorActor"
            implementation="com.echoed.chamber.services.partneruser.PartnerUserServiceLocatorActor"
            autostart="true">
        <!--suppress SpringModelInspection -->
        <property name="partnerUserServiceCreator" ref="partnerUserServiceCreator" />
    </akka:untyped-actor>
</beans>

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
	        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
	        http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-3.0.xsd"
       default-init-method="init"
       default-destroy-method="destroy">


    <import resource="classpath:chamber-properties.xml" />

    <import resource="classpath:database.xml" />

    <bean id="applicationContextRef" class="com.echoed.util.ApplicationContextRef" />

    <context:component-scan base-package="com.echoed.chamber.config" />


    <bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="allowCoreThreadTimeOut" value="true" />
        <property name="maxPoolSize" value="50" />
        <property name="threadNamePrefix" value="Chamber-executor" />
    </bean>

    <bean class="com.echoed.util.XTrustProvider" init-method="install" />
    <bean id="httpClient" class="dispatch.Http" destroy-method="shutdown" />

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="cacheSeconds" value="-1" /> <!-- cache forever -->
        <property name="basenames">
            <list>
                <value>${http.urls.messages}/messages</value>
                <value>${http.urls.messages}/errors</value>
            </list>
        </property>
    </bean>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" >
        <property name="validationMessageSource" ref="messageSource" />
    </bean>

    <bean id="globalsManager" class="com.echoed.chamber.services.GlobalsManager" >
        <property name="urlsProperties" ref="urlsProperties" />
        <property name="gitProperties" ref="gitProperties" />
        <property name="facebookClientId" value="${facebook.clientId}" />
        <property name="version" value="${version}" />
        <property name="messageSource" ref="messageSource" />
        <property name="envType" value="${envType}" />
    </bean>

    <bean id="encrypter" class="com.echoed.util.Encrypter" >
        <property name="secret" value="${echoed.secret}" />
    </bean>


    <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="username" value="${mail.smtp.user}" />
        <property name="password" value="${mail.smtp.password}" />
        <property name="javaMailProperties" ref="mailProperties" />
    </bean>


    <!-- This is here because the mail service needs to resolve mustache templates -->
    <bean id="mustacheEngine" class="com.echoed.util.mustache.MustacheEngine">
        <property name="prefix" value="${mustache.prefix}" />
        <property name="suffix" value="${mustache.suffix}" />
        <property name="cache" value="${mustache.cache}" />
        <property name="executorService" value="#{ executor.threadPoolExecutor }" />
    </bean>


    <bean id="cacheManager" class="com.echoed.cache.LocalCacheManager">
        <property name="expireInMinutes" value="${cache.expireInMinutes}" />
        <property name="expirationConfig" ref="cacheProperties" />
    </bean>


    <bean id="blobStore" class="com.echoed.util.BlobStore">
        <property name="provider" value="${blobstore.provider}" />
        <property name="username" value="${blobstore.identity}" />
        <property name="credential" value="${blobstore.credential}" />
        <property name="container" value="${blobstore.container}" />
        <property name="containerUrl" value="${blobstore.containerUrl}" />
        <property name="actorSystem" ref="actorSystem" />
    </bean>


    <bean id="imageService" class="com.echoed.chamber.services.image.ImageServiceActorClient">
        <property name="actorRef" ref="imageServiceActor" />
    </bean>

    <bean id="emailService" class="com.echoed.chamber.services.email.EmailServiceActorClient">
        <property name="actorRef" ref="emailServiceActor" />
    </bean>

    <bean id="eventService" class="com.echoed.chamber.services.event.EventServiceActorClient">
        <property name="actorRef" ref="eventServiceActor" />
    </bean>

    <bean id="feedService" class="com.echoed.chamber.services.feed.FeedServiceActorClient">
        <property name="feedServiceActor" ref="feedServiceActor" />
    </bean>

    <bean id="tagService" class="com.echoed.chamber.services.tag.TagServiceActorClient">
        <property name="tagServiceActor" ref="tagServiceActor" />
    </bean>

    <bean id="facebookAccess" class="com.echoed.chamber.services.facebook.FacebookAccessActorClient">
        <property name="actorRef" ref="facebookAccessActor" />
    </bean>

    <bean id="facebookServiceLocator" class="com.echoed.chamber.services.facebook.FacebookServiceLocatorActorClient">
        <property name="facebookServiceLocatorActor" ref="facebookServiceLocatorActor" />
    </bean>

    <bean id="echoService" class="com.echoed.chamber.services.echo.EchoServiceActorClient">
        <property name="echoServiceActor" ref="echoServiceActor" />
    </bean>

    <bean id="twitterAccess" class="com.echoed.chamber.services.twitter.TwitterAccessActorClient">
        <property name="twitterAccessActor" ref="twitterAccessActor" />
    </bean>

    <bean id="twitterServiceLocator" class="com.echoed.chamber.services.twitter.TwitterServiceLocatorActorClient">
        <property name="twitterServiceLocatorActor" ref="twitterServiceLocatorActor" />
    </bean>

    <bean id="echoedUserServiceLocator" class="com.echoed.chamber.services.echoeduser.EchoedUserServiceLocatorActorClient">
        <property name="echoedUserServiceLocatorActor" ref="echoedUserServiceLocatorActor" />
    </bean>

    <bean id="partnerServiceManager" class="com.echoed.chamber.services.partner.PartnerServiceManagerActorClient">
        <property name="actorRef" ref="partnerServiceManagerActor" />
    </bean>

    <bean id="partnerUserServiceLocator" class="com.echoed.chamber.services.partneruser.PartnerUserServiceLocatorActorClient">
        <property name="partnerUserServiceLocatorActor" ref="partnerUserServiceLocatorActor" />
    </bean>

    <bean id="adminUserServiceLocator" class="com.echoed.chamber.services.adminuser.AdminUserServiceLocatorActorClient">
        <property name="adminUserServiceLocatorActor"  ref="adminUserServiceLocatorActor" />
    </bean>

    <bean id="shopifyPartnerServiceManager" class="com.echoed.chamber.services.partner.shopify.ShopifyPartnerServiceManagerActorClient">
        <property name="actorRef" ref="shopifyPartnerServiceManagerActor" />
    </bean>

    <bean id="shopifyAccess" class="com.echoed.chamber.services.partner.shopify.ShopifyAccessActorClient">
        <property name="shopifyAccessActor" ref="shopifyAccessActor"/>
    </bean>

    <bean id="networkSolutionsPartnerServiceManager" class="com.echoed.chamber.services.partner.networksolutions.NetworkSolutionsPartnerServiceManagerActorClient">
        <property name="actorRef" ref="networkSolutionsPartnerServiceManagerActor" />
    </bean>

    <bean id="networkSolutionsAccess" class="com.echoed.chamber.services.partner.networksolutions.NetworkSolutionsAccessActorClient">
        <property name="networkSolutionsAccessActor" ref="networkSolutionsAccessActor"/>
    </bean>

    <bean id="bigCommercePartnerServiceManager" class="com.echoed.chamber.services.partner.bigcommerce.BigCommercePartnerServiceManagerActorClient">
        <property name="actorRef" ref="bigCommercePartnerServiceManagerActor" />
    </bean>

    <bean id="bigCommerceAccess" class="com.echoed.chamber.services.partner.bigcommerce.BigCommerceAccessActorClient">
        <property name="bigCommerceAccessActor" ref="bigCommerceAccessActor"/>
    </bean>

    <bean id="magentoGoPartnerServiceManager" class="com.echoed.chamber.services.partner.magentogo.MagentoGoPartnerServiceManagerActorClient">
        <property name="actorRef" ref="magentoGoPartnerServiceManagerActor" />
    </bean>

    <bean id="magentoGoAccess" class="com.echoed.chamber.services.partner.magentogo.MagentoGoAccessActorClient">
        <property name="magentoGoAccessActor" ref="magentoGoAccessActor"/>
    </bean>


    <util:list id="filteredUserAgents">
        <value>AppEngine-Google</value>
        <value>bitlybot</value>
        <value>brainbot</value>
        <value>Butterfly</value>
        <value>Crowsnest</value>
        <value>Embedly</value>
        <value>facebookexternalhit</value>
        <value>Feedfetcher</value>
        <value>Googlebot</value>
        <value>InAGist</value>
        <value>Jakarta</value>
        <value>Java</value>
        <value>JS-Kit</value>
        <value>LinkedInBot</value>
        <value>news.me</value>
        <value>newsme</value>
        <value>NING</value>
        <value>RockMeltEmbedService</value>
        <value>ShowyouBot</value>
        <value>TweetmemeBot</value>
        <value>TweetedTimes</value>
        <value>Twitterbot</value>
        <value>Voyager</value>
        <value>YandexBot</value>
        <value>Yepi</value>
        <value>Yeti</value>
        <value>FlipboardProxy</value>
    </util:list>




</beans>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.echoed.chamber.dao.views.FeedDao">

    <cache-ref namespace="com.echoed.chamber.dao.cache.Flushing30" />

    <resultMap id="feedResult" type="com.echoed.chamber.domain.views.Feed">
        <constructor>
            <idArg column="echoedUserId" javaType="String"/>
            <arg javaType="com.echoed.chamber.domain.EchoedUser" resultMap="com.echoed.chamber.dao.EchoedUserDao.echoedUserResult"/>
        </constructor>
        <collection property="echoes" ofType="com.echoed.chamber.domain.views.EchoViewDetail" javaType="ArrayList" resultMap="echoViewResult" />
    </resultMap>

    <resultMap id="echoViewResult" type="com.echoed.chamber.domain.views.EchoViewDetail">
        <constructor>
            <idArg column="echoId" javaType="String" />
            <arg column="echoProductName" javaType="String"/>
            <arg column="echoCategory" javaType="String"/>
            <arg column="echoBrand" javaType="String"/>
            <arg column="echoLandingPageUrl" javaType="String" />
            <arg column="echoedFriendId" javaType="String"/>
            <arg column="echoedFriendName" javaType="String"/>
            <arg column="partnerId" javaType="String" />
            <arg column="partnerName" javaType="String" />
            <arg resultMap="com.echoed.chamber.dao.ImageDao.imageResult" javaType="com.echoed.chamber.domain.Image" />
        </constructor>
    </resultMap>

    <resultMap id="echoViewPublicResult" type="com.echoed.chamber.domain.views.EchoViewPublic">
        <constructor>
            <idArg column="echoId" javaType="String"/>
            <arg column="echoBoughtOn" javaType="Date"/>
            <arg column="echoProductName" javaType="String"/>
            <arg column="echoCategory" javaType="String"/>
            <arg column="echoBrand" javaType="String"/>
            <arg column="echoLandingPageUrl" javaType="String"/>
            <arg column="partnerName" javaType="String"/>
            <arg column="partnerId" javaType="String" />
            <arg column="partnerHandle" javaType="String"/>
            <arg resultMap="com.echoed.chamber.dao.ImageDao.imageResult" javaType="com.echoed.chamber.domain.Image" />
        </constructor>
    </resultMap>


    <select id="findByEchoedUserId" resultMap="feedResult">
        select
            <include refid="com.echoed.chamber.dao.EchoedUserDao.echoedUserColumns" />
            EU2.id as echoedFriendId,
            EU2.name as echoedFriendName,
            EU2.screenName as echoedFriendScreenName,
            E.id as echoId,
            E.boughtOn as echoBoughtOn,
            E.productName as echoProductName,
            P.category as echoCategory,
            E.brand as echoBrand,
            coalesce(E.price, 0)  as echoPrice,
            E.landingPageUrl as echoLandingPageUrl,
            coalesce(EM.totalClicks, 0) as echoTotalClicks,
            ROUND(coalesce(EM.credit, 0),2) as echoCredit,
            P.id as partnerId,
            P.name as partnerName,
            PS.id as partnerSettingsId,
            coalesce(PS.minClicks, 0) as partnerSettingsMinClicks,
            coalesce(PS.minPercentage, 0) as partnerSettingsMinPercentage,
            coalesce(PS.maxPercentage, 0) as partnerSettingsMaxPercentage,
            FP.id as facebookPostId,
            FP.facebookId as facebookPostFacebookId,
            TS.id as twitterStatusId,
            TS.twitterId as twitterStatusTwitterId,
            <include refid="com.echoed.chamber.dao.ImageDao.imageColumns" />
        from
            EchoedUser EU
            left outer join EchoedFriend EF on EU.id = EF.fromEchoedUserId
            left outer join EchoedUser EU2 on EF.toEchoedUserId = EU2.id
            left outer join Echo E on EF.toEchoedUserId = E.echoedUserId
            left outer join Image I on E.imageId = I.id
            left outer join EchoMetrics EM on E.id = EM.echoId
            left outer join Partner P on E.partnerId = P.id
            left outer join PartnerSettings PS on E.partnerSettingsId = PS.id
            left outer join FacebookPost FP on E.facebookPostId = FP.id
            left outer join TwitterStatus TS on E.twitterStatusId = TS.id
        where
            EU.id = #{id} and I.sizedWidth > 0
        order by
            E.createdOn desc, E.id DESC
        limit
            #{start},#{limit}
    </select>

    <select id="getPartnerIds" resultType="String">
        select coalesce(handle, id) from Partner order by createdOn desc
    </select>

</mapper>

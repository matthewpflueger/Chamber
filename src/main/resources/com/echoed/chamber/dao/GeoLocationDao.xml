<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.echoed.chamber.dao.GeoLocationDao">

    <cache-ref namespace="com.echoed.chamber.dao.cache.Default" />

    <resultMap id="geoLocationResult" type="com.echoed.chamber.domain.GeoLocation">
        <constructor>
            <idArg column="id" javaType="String" />
            <arg column="updatedOn" javaType="Date" />
            <arg column="createdOn" javaType="Date" />
            <arg column="ipAddress" javaType="String"/>
            <arg column="countryCode" javaType="String" />
            <arg column="countryName" javaType="String"/>
            <arg column="regionCode" javaType="String" />
            <arg column="regionName" javaType="String" />
            <arg column="city" javaType="String" />
            <arg column="postcode" javaType="String" />
            <arg column="latitude" javaType="String" />
            <arg column="longitude" javaType="String" />
            <arg column="isp" javaType="String" />
            <arg column="organization" javaType="String" />
            <arg column="updateStatus" javaType="String" />
        </constructor>
    </resultMap>


    <select id="findById" resultMap="geoLocationResult">
    	select * from GeoLocation where id = #{id}
    </select>

    <select id="findByIpAddress" resultMap="geoLocationResult">
        select * from GeoLocation where ipAddress = #{ipAddress}
    </select>


    <select id="findForCrawl" resultMap="geoLocationResult" useCache="false" >
        select
                GL.id,
                GL.updatedOn,
                GL.createdOn,
                GL.countryCode,
                GL.countryName,
                GL.regionCode,
                GL.regionName,
                GL.city,
                GL.postcode,
                GL.latitude,
                GL.longitude,
                GL.isp,
                GL.organization,
                GL.updateStatus,
                E.ipAddress
                <if test="findClick == true">
                    from EchoClick E
                </if>
                <if test="findClick == false">
                    from Echo E
                </if>
            left join GeoLocation GL on E.ipAddress = GL.ipAddress
            where E.ipAddress is not null
            and (GL.ipAddress is null or GL.updatedOn &lt; #{lastUpdatedOn})
            order by E.createdOn desc
            limit 1;
    </select>

    <insert id="insertOrUpdateForFailure" parameterType="com.echoed.chamber.domain.GeoLocation">
        insert into GeoLocation(
                id,
                createdOn,
                ipAddress,
                updateStatus)
            values (
                #{id},
                #{createdOn},
                #{ipAddress},
                #{updateStatus})
            on duplicate key update
                updatedOn = now(),
                updateStatus = #{updateStatus}
    </insert>

    <insert id="insertOrUpdate" parameterType="com.echoed.chamber.domain.GeoLocation">
    	insert into GeoLocation(
                id,
                createdOn,
                ipAddress,
                countryCode,
                countryName,
                regionCode,
                regionName,
                city,
                postcode,
                latitude,
                longitude,
                isp,
                organization,
                updateStatus)
            values (
                #{id},
                #{createdOn},
                #{ipAddress},
                #{countryCode},
                #{countryName},
                #{regionCode},
                #{regionName},
                #{city},
                #{postcode},
                #{latitude},
                #{longitude},
                #{isp},
                #{organization},
                #{updateStatus})
            on duplicate key update
                updatedOn = now(),
                countryCode = #{countryCode},
                countryName = #{countryName},
                regionCode = #{regionCode},
                regionName = #{regionName},
                city = #{city},
                postcode = #{postcode},
                latitude = #{latitude},
                longitude = #{longitude},
                isp = #{isp},
                organization = #{organization},
                updateStatus = #{updateStatus}
    </insert>

    <delete id="deleteById">
        delete from GeoLocation where id = #{id}
    </delete>

    <delete id="deleteByIpAddress">
        delete from GeoLocation where ipAddress = #{ipAddress}
    </delete>

</mapper>
